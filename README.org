* Emacs Taskrunner
This is an elisp library which aims to provide a way to retrieve all of the
tasks/targets from various build systems and execute them in a compilation buffer.

The ultimate goal is to use this library to provide the data necessary for an
interactive interface through helm/ivy/ido which will let the user select tasks
and run them. Additionally, it will also provide a task caching mechanism so the
tasks do not have to be retrieved over and over again.

*Warning*: I have not worked with most of these build systems/taskrunners but
 support has been provided for them. Since my knowledge is fairly elementary, I
 might miss some subtleties. If you have any advice then please feel free to
 open a pull request/issue on this repository. Thanks
 
* API
** On caches and speed
~Taskrunner~ is a library made to retrieve and run tasks from several build
systems/taskrunners. Retrieving the tasks can be costly since it requires:
- time
- resources(spawning a whole new process)
To attempt to reduce these costs as much as possible, ~taskrunner~ uses a series
of caches to store the retrieved information. These caches are nothing more than
simple hashmaps where the keys are often times the symbol representation of the
path to the project root. The hashmaps use a symbol instead of a string
since(according to the elisp manual) symbols are faster to compare than strings
which means faster retrieval. 

Here are the caches and their respective uses:
- ~taskrunner-last-command-cache~: Used to store the last command ran in the
  current project. It is a hashmap with project root as key and a string
  containing the last command as a value.
- ~taskrunner-buld-cache~: Used to store the build directory for ~CMake/Meson/Make~
  project. This is usually the directory which contains either a ~Makefile~ or a
  ~ninja.buld~ file. The key is the project root and the value is a string which
  is the path to the build directory.
- ~taskrunner-tasks-cache~: This is the main and most important cache. It stores
  all of the tasks for the current project in order for them to be retrieved
  quickly and to avoid spawning a process unless absolutely necessary. The key
  is the project root and the value is a list of strings of the form
  ~TASKRUNNER-NAME COMMAND~.
- ~taskrunner-command-history-cache~: This cache stores the commands ran in the
  current project. The key is again the project root and the value is a list of
  strings where each contains a command. The format is the same as the
  ~taskrunner-tasks-cache~. The size of the history is limited by the variable
  ~taskrunner-command-history-size~ and its default value is 10.
*** Interacting with the caches
If you use this library, you should never have to interact with the caches/hashmaps
"manually". There are getter/setter functions for each cache. They can be found
in the ~Functions~ section below.
** Functions
*** Getters and setters for caches
~taskrunner-get-last-command-ran~: Retrieves the last command ran and returns
it. The command will be a string or nil if the project has not ran a command. 
- ~DIR~: Path to the root of the project(string)

~taskrunner-set-last-command-ran~: This sets the last command ran. It accepts
three arguments which are:
- ~ROOT~: the root of the project(string)
- ~DIR~: The directory in which the command was ran(string)
- ~COMMAND~: The command itself(string)
  
~taskrunner-add-to-tasks-cache~: Add a list of commands to the tasks cache. It
accepts two arguments:
- ~ROOT~: The root of the project(string)
- ~TASKS~: A list of commands(list of strings, one for each command)
  
~taskrunner-get-tasks-from-cache~: Retrieve the tasks from the cache. Returns ~nil~
or a list of strings where each string is a command. It accepts one optional
argument:
- ~DIR~: The project root for which to retrieve the tasks from the cache for(string)
  
~taskrunner-add-to-build-cache~: Add a build folder path to the cache. Accepts two
arguments:
- ~ROOT~: Root of the project(string)
- ~DIR~: Path to build folder(string)

~taskrunner-get-build-cache~: Retrieve the build folder for a project. It accepts
one optional argument:
- ~DIR~: The path to the project root(string)
  
~taskrunner-add-command-to-history~: Add a command to the history log. Accepts two
arguments:
- ~ROOT~: The root of the project(string)
- ~COMMAND~: The command to be added(string)
  
~taskrunner-get-commands-from-history~: Retrieve the command history for a
project. It accepts one optional argument:
- ~ROOT~: The root of the project(string)

~taskrunner-invalidate-build-cache~: Reset the build cache/clear the hashmap
~taskrunner-invalidate-last-command-cache~: Reset the last ran command cache/clear the hashmap
~taskrunner-invalidate-command-history-cache~: Reset the command history cache/clear the hashmap
~taskrunner-invalidate-tasks-cache~: Reset the tasks cache/clear the hashmap
*** Cache file operations
- ~taskrunner-read-cache-file~: Read the cache file called ~taskrunner-tasks.eld~
  and load all caches with its contents. This will overwrite all caches with the
  contents of the file. As a sidenote, this file is only read once at startup.
- ~taskrunner-write-cache-file~: Serialize all hashmaps and write them to the file
  called ~taskrunner-tasks.eld~ located in the ~.emacs~ directory. This function
  will overwrite all contents of the task cache file.
- ~taskrunner-delete-cache-file~: This will delete the cache file. It does not
  create a new file in its place. ~taskrunner-write-cache-file~ will do so if necessary.
*** Retrieving tasks
There are two main functions used to retrieve tasks:

~taskrunner-get-tasks-sync~: This functions retrieves all tasks
*synchronously*. It accepts one optional argument called ~DIR~ which can be used
to indicate which directory you would like to retrieve tasks from. If this
argument is not provided then the result of ~projectile-project-root~ is used
instead. If the cache file is not loaded then this function will load it
automatically whenever called. Additionally, it will load the tasks/build cache with
the new files retrieved.

~taskrunner-get-tasks-async~: This function retrieves all tasks *asynchronously*. It
accepts two arguments. The first is a function which should accept *one*
argument. The argument will be either ~nil/empty list~ or it will be a list of
tasks of the form ~("TASKRUNNER TARGET2" "TASKRUNNER TARGET2"...)~. When the tasks
are retrieved in the background, they will be passed to the function. The second
argument is a directory path and it is optional. Just like the synchronous
function, it is a path to the directory where you would like to look for
tasks. If not provided, the output of ~projectile-project-root~ is used. This
function will load the cache file automatically. Additionally, it will load the
tasks/build caches with the new files retrieved.

To retrieve the tasks asynchronously, this function uses ~emacs-async~ in the
background. This spawns a new process, gathers the tasks and passes the list
generated(whether empty or not) to the current Emacs instance which called it.

~taskrunner-collect-tasks~: Retrieve all tasks for a project and return them as a
list of the form ~("TASKRUNNER TASK1" "TASKRUNNER TASK2"...)~. This is a low level
function. It runs *synchronously* and simply retrieves all of the tasks, puts them
in a list and returns them. There should be no need to use this unless you do
not want to update the tasks cache. This function will *automatically update the
build cache* whenever it encounters a ~Makefile~ or a ~ninja.build~. 
It accepts one argument:
- ~DIR~: The path to the directory from which to collect tasks from(string)
*** Refreshing the cache
Since the tasks are cached and retrieved from the cache whenever possible, they
might become "stale". If tasks are cached for a certain project and the user
adds more tasks then they might not be displayed. To deal with this issue, the
following functions are provided:

~taskrunner-refresh-cache-sync~: Refreshes the cache for the project
*synchronously*. It accepts one optional argument:
- ~DIR~: The path to the directory for which to refresh/gather new tasks
  from(string)

~taskrunner-refresh-cache-async~: Refresh the cache for the project
asynchronously. It accepts one mandatory and one optional argument:
- ~FUNC~: A function which accepts only one argument. The new list of tasks will
  be passed to this function when it is ready. It will be a list of strings of
  the form ~("TASKRUNNER TASK1" "TASKRUNNER TASK2")~.
- ~DIR(OPTIONAL)~: The path to the directory for which to refresh/gather new tasks
  from(string). Defaults to ~projectile-project-root~.
*** Others
This section contains functions which are quite general.
*** Debug
To debug the cache contents, you can use:
- ~taskrunner--debug-show-cache-contents~: This will create a temporary buffer and
  pretty print all of the cache contents with one section for each cache. The
  format is 2 columns with column 1 being the key and column 2 being the value
  for that key.

If you need to debug anything else then use the built in debugging tools that
Emacs provides.
** Variables
Here is a list of variables used in the library. The majority should not be
set/controlled manually.

- ~taskrunner-cache-file-read~: Indicates whether or not the cache file has been
  read for the current session. It is only set once when the file is first read.
- ~taskrunner-async-process-dir~: TODO
- ~taskrunner--buffer-name-regexp~: All buffers which run a command are
  compilation buffers with a special name. This name starts with ~*taskrunner-~
  and the rest is dependent on the taskrunner and command ran. This is a regexp
  used to find all such buffers so they can be grouped in a list.
- ~taskrunner-command-history-size~: The size of the command history for EACH
  project cached. Its default is ~10~.
* Design Choices
** Async vs Sync
This library comes with both sync and async functions. Originally, everything
worked synchronously but obviously Emacs froze and was unresponsive. For most
taskrunners/build systems, it took only 1-3 seconds for the tasks to be
retrieved. On the other hand most Java based systems(gradle is the worst) will
take 5-9 seconds to start up and spit out a list of tasks. As a result,
~emacs-async~ was used as a way to avoid freezing the UI while tasks were being
retrieved. 

Under the hood, this whole library is synchronous and starts synchronous
processes in order to coordinate the way tasks are retrieved. Most projects use
a single build system/taskrunner but for others(web projects for example) might
use multiple(gulp and package.json/npm scripts and so on...). If the tasks are
retrieved asynchronously from the start then it becomes very difficult to
synchronize the way the tasks are added to caches and might cause data
races. Emacs 26 brought mutexes but those will freeze the UI as well while they
are waiting.
** Threads vs ~emacs-async~ 
Emacs 26 brough threads but they are cooperative. This means that processes
which take a long time(cough, cough, Gradle and its daemon) will still freeze
the UI even when being ran on a separate thread. Due to this, ~emacs-async~ is
used even though the Emacs which runs this library might have threads available.
* Project Status
Currently, this project can is stable and can be used for the following
systems/frontends listed below.
** Supported Systems
*** Currently supported
**** Build/Task Systems
- [X] yarn/npm
- [X] Gulp
- [X] Grunt
- [X] Gradle
- [X] Jake
- [X] Apache ant
- [X] mix
- [X] leinengen
- [X] rake
- [X] Make
- [X] CMake
- [X] Meson/Ninja
- [X] [[https://github.com/go-task/task][go-task]] 
- [X] [[https://github.com/magefile/mage][mage]] 
- [X] [[https://github.com/pydoit/doit][doit]] 
- [X] [[https://github.com/jakedeichert/mask][mask]] 
- [X] [[https://github.com/casey/just][just]] 
- [X] [[https://github.com/sagiegurari/cargo-make][cargo-make]]
- [X] cargo(Limited Support)
- [X] go compiler(Limited support)
- [X] Cask(Limited Support)
- [X] stack(Limited Support)
- [X] cabal(Limited Support)
**** User interfaces
- [X] ivy
- [X] helm
- [X] ido
*** Planning to add support for
- [ ] Apache maven
- [ ] [[https://waf.io/][waf]] 
- [ ] [[https://github.com/pantsbuild/pants][pants]] 
- [ ] tasks.json(VSCode)
- [ ] Ninja
- [ ] sbt
- [ ] Buck
- [ ] Bazel
- [ ] msbuild(Maybe)
