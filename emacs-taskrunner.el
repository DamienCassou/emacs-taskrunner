;; Emacs taskrunner

(require 'projectile)

(defconst taskrunner--js-gulp-tasks-command "gulp --tasks-simple"
  "Command used to retrieve the tasks for 'gulp' in json form.")

(defconst taskrunner--rake-tasks-command '("rake" "-AT")
  "Command used to retrieve the tasks from rake.")

(defconst taskrunner--make-phony-regexp "\.PHONY[[:space:]]+:[[:space:]]+"
  "Regular expression used to locate all PHONY targets in makefile.")

(defvar taskrunner-tasks-cache '()
  "A cache used to store the tasks retrieved.
It is an alist of the form (project-root . list-of-tasks)")

(defun taskrunner--make-get-phony-tasks (dir)
  "Retrieve all 'PHONY' tasks from the makefile located in the directory DIR."
  (interactive)
  (let ((make-path (concat dir "Makefile"))
        (buff (get-buffer-create "*taskrunner-makefile*"))
        (tasks '())
        )
    (with-temp-buffer
      (set-buffer buff)
      (goto-line 1)
      (insert-file-contents make-path)
      (while (re-search-forward taskrunner--make-phony-regexp nil t)
        (setq tasks (push (symbol-name (symbol-at-point)) phony-tasks)))
      (kill-current-buffer))
    ;; Return tasks
    tasks
    )
  )

(defun taskrunner--cmake-tasks (dir)
  "Retrieve tasks for the CMake build system from the project in directory DIR.
Since the Makefile generated by CMake can be in several different places, first
the directory provided is checked.  If it is not present there, then attempt to
check for a directory called 'build' or 'Build'.  If those are not present then
the fallback behaviour is to ask the user to specify the directory."
  (let ((dir-files (directory-files dir))
        )
    (cond
     ((member "build" dir-files)
      (taskrunner--make-get-phony-tasks (concat dir "build")))
     ((member "Build" dir-files)
      (taskrunner--make-get-phony-tasks (concat dir "Build")))
     )
    )
  )

(defun taskrunner--yarn-or-npm (dir)
  "Attempt to decide if the current project uses in directory DIR yarn or npm.
If the file 'yarn.lock' is not found then the default is 'npm'."
  (let ((dir-files  (directory-files dir)))
    (if (member "yarn.lock" dir-files)
        "YARN"
      "NPM")
    )
  )

(defun taskrunner--js-get-package-tasks (dir)
  "Open and extract the tasks from package.json located in directory DIR.
This command returns a list containing the names of the tasks as strings."
  (let* ((package-path (concat dir "package.json"))
         (package-json-contents (assoc 'scripts (json-read-file package-path)))
         (task-prefix (taskrunner--yarn-or-npm dir))
         (package-tasks '())
         )

    (dolist (el (cdr package-json-contents))
      (setq package-tasks (push (concat task-prefix " " (symbol-name (car el))) package-tasks)))
    package-tasks
    )
  )

(defun taskrunner--js-get-gulp-tasks (dir)
  "Retrieve tasks for gulp if there is a gulp taskfile in directory DIR."
  (interactive)
  (let ((default-directory dir))
    (map 'list (lambda (elem)
                 (concat "GULP" " " elem)) (split-string (shell-command-to-string taskrunner--js-gulp-tasks-command) "\n"))
    )
  )

(defun taskrunner--gradle-get-heading-tasks (heading)
  "Retrieve the gradle tasks below the heading HEADING and return as list."
  (goto-line 1)
  (narrow-to-region (re-search-forward heading nil t)
                    (progn 
                      (re-search-forward "^$" nil t)
                      (previous-line 1)
                      (line-end-position)))

  (map 'list (lambda (elem)
               (message (concat "GRADLE" " " (car (split-string elem " ")))))
       ;; (message "%s" (split-string elem " ")))
       (split-string (buffer-string) "\n"))
  (widen)
  )

(defun taskrunner--gradle-tasks (dir)
  "Retrieve the gradle tasks in for the project in directory DIR."
  (let ((default-directory dir)
        (buff (get-buffer-create "*taskrunner-gradle-tasks*"))
        )
    (call-process "gradle"  nil "*taskrunner-gradle-tasks*"  nil "tasks" "--all")
    (with-temp-buffer
      (set-buffer buff)
      (message "Get build")
      (taskrunner--gradle-get-heading-tasks "Build tasks\n-+\n")
      (taskrunner--gradle-get-heading-tasks "Help tasks\n-+\n")
      (taskrunner--gradle-get-heading-tasks "Verification tasks\n-+\n")
      (taskrunner--gradle-get-heading-tasks "Build Setup tasks\n-+\n")
      (taskrunner--gradle-get-heading-tasks "Documentation tasks\n-+\n")
      (taskrunner--gradle-get-heading-tasks "Other tasks\n-+\n")
      (kill-buffer buff)
      )
    )
  )


(defun taskrunner--rake-tasks (dir)
  "Retrieve tasks from the rake build system for the project in directory DIR."
  (let ((default-directory dir)
        (task-list '()))
    (map 'list (lambda (elem)
                 (concat "RAKE" " " (cadr (split-string elem " "))))
         (split-string (shell-command-to-string taskrunner--rake-tasks-command) "\n"))
    )
  )

(defun taskrunner--load-tasks-in-cache (dir)
  "Locate all task files and load them into the cache for the project."
  (interactive)
  (let ((work-dir-files (directory-files dir))
        (tasks '()))
    (if (member "package.json" work-dir-files)
        (append tasks (taskrunner--js-get-package-tasks dir))
      )
    (if (or (member "gulpfile.js" work-dir-files)
            (member "Gulpfile.js" work-dir-files))
        (append tasks (taskrunner--js-get-gulp-tasks dir))
      )
    (if (or (member "rakefile" work-dir-files)
            (member "Rakefile" work-dir-files)
            (member "rakefile.rb" work-dir-files)
            (member "Rakefile.rb" work-dir-files))
        (append tasks (taskrunner--ruby-get-rake-tasks dir))
      )

    tasks
    )
  )


(defun taskrunner--get-grunt-tasks-from-buffer ()
  "Retrieve the tasks from the grunt taskrunner. It uses grunt --help to
retrieve them."
  (goto-line 1)
  (let ((beg (re-search-forward "Available tasks.+\n" nil t))
        ;; The end of the region is simply an empty line
        (end (re-search-forward "^$" nil t))
        (splits))
    (when beg
      (narrow-to-region beg end)
      (setq splits (split-string (buffer-string) "\n"))
      (widen))
    (dolist (el splits)
      (message "Called from splits")
      (message "%s" (car (split-string (string-trim el) " "))))
    )
  )

(defun taskrunner--grunt-process-sentinel (process event)
  "Sentinel used to retrieve the grunt tasks from an async process."
  (cond
   ((string-match-p "finished" event)
    (message" Done!")
    (with-temp-buffer
      (set-buffer (process-buffer process))
      (taskrunner--get-grunt-tasks-from-buffer))
    )
   (t
    (message "Failure to retrieve tasks from grunt! Error produced was %s" event)))
  )

(defun taskrunner--create-process (dir commands run-in-compile &optional
                                       buff-name sentinel process-name)
  "Run the command COMMAND in the directory DIR. If RUN-IN-COMPILE is t
then run the command in compilation mode, otherwise run an async process."
  (let ((default-directory dir))
    (if (not run-in-compile)
        (progn
          (make-process
           :name process-name
           :buffer buff-name
           :command commands
           :sentinel sentinel))
      )
    )
  )

(provide 'emacs-taskrunner)
;;; emacs-taskrunner.el ends here
